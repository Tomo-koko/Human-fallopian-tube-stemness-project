
# Fix seed and figure font
set.seed(42)
theme_set(theme_gray(base_family = "Arial"))

# Load scRNA-seq data by Lengyel et al
url_len <- "https://datasets.cellxgene.cziscience.com/9e7dd889-c863-46f9-9ab9-99175e23fd75.rds"
output_file_len <- "9e7dd889-c863-46f9-9ab9-99175e23fd75.rds"
download.file(url_len, destfile = output_file_len)
sc_len <- readRDS(output_file_len)

# Extract epithelial cells by the expression of EpCAM (ENSG00000119888) and CDH1 (ENSG00000039068)
sc_len@meta.data$cell_type <- NULL
genes_of_epithelial_cell <- c("ENSG00000119888", "ENSG00000039068")  
expression_data_len <- FetchData(sc_len, vars = genes_of_epithelial_cell, slot = "data")
plot_epi_len <- data.frame(
  Gene1 = expression_data_len[, "ENSG00000119888"],
  Gene2 = expression_data_len[, "ENSG00000039068"]
)
epithelial_cells_len <- sum(plot_epi_len$Gene1 >= 0.1 & plot_epi_len$Gene2 >= 0.1)
ggplot(plot_epi_len, aes(x = Gene1, y = Gene2)) +
  geom_point(size = 1, alpha = 0.7) +
  geom_vline(xintercept = 0.1, linetype = "dashed", color = "red") +  
  geom_hline(yintercept = 0.1, linetype = "dashed", color = "blue") + 
  labs(
    title = "Epithelial characteristics of all cells in the dataset by Lengyel et al",
    x = "Expression of EpCAM",
    y = "Expression of CDH1"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  ) +
  annotate(
    "text", x = max(plot_epi_len$Gene1), y = max(plot_epi_len$Gene2), 
    label = paste("EpCAM/CDH1(+/+) epithelial cells:", epithelial_cells_len),
    hjust = 1, vjust = 1, color = "black", size = 5
  )

  ## Threshold to define epithelial cells: the expression of EpCAM >= 0.1 and CDH >= 0.1
  data_len <- sc_len@assays$RNA@data
  cells_to_keep_len <- colnames(data_len)[
  data_len["ENSG00000119888", ] >= 0.1 & data_len["ENSG00000039068", ] >= 0.1
ã€€]
  epi_filter_len <- subset(sc_len, cells = cells_to_keep_len)

# Create an ENSEMBL ID set of the important genes
ensembl_110 <- useEnsembl("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", version = 110)
important_gene_symbols <- important_genes$Gene_Symbol
important_ensembl_ids <- getBM(attributes = c("hgnc_symbol", "ensembl_gene_id"), 
                     filters = "hgnc_symbol", 
                     values = important_gene_symbols, 
                     mart = ensembl_110)
## We used the objects above for 3-2. Trajectory Analysis of scRNA-seq Data by Ulrich et al

important_ensembl_ids_len <- important_ensembl_ids %>%
                              filter(ensembl_gene_id %in% epi_filter_len@assays$RNA$counts@Dimnames[[1]])
important_ensembl_ids_len
##    hgnc_symbol ensembl_gene_id
## 1      ALDH1A3 ENSG00000184254
## 2       BCL2A1 ENSG00000140379
## 3        BNIP5 ENSG00000189325
## 4     C15orf48 ENSG00000166920
## 5        CCL20 ENSG00000115009
## 6         CD74 ENSG00000019582
## 7          CFB ENSG00000243649
## 8         CTSE ENSG00000196188
## 9        CXCL5 ENSG00000163735
## 10       CXCL6 ENSG00000124875
## 11       DAPP1 ENSG00000070190
## 12        EDN2 ENSG00000127129
## 13       GDF15 ENSG00000130513
## 14       HLA-B ENSG00000234745
## 15    HLA-DPA1 ENSG00000231389
## 16    HLA-DPB1 ENSG00000223865
## 17    HLA-DQA1 ENSG00000196735
## 18    HLA-DQA2 ENSG00000237541
## 19     HLA-DRA ENSG00000204287
## 20    HLA-DRB1 ENSG00000196126
## 21    HLA-DRB5 ENSG00000198502
## 22       HLA-F ENSG00000204642
## 23        IDO1 ENSG00000131203
## 24       IFI27 ENSG00000165949
## 25        IFI6 ENSG00000126709
## 26       IGFL1 ENSG00000188293
## 27       IL1RN ENSG00000136689
## 28        IL32 ENSG00000008517
## 29       IL4I1 ENSG00000104951
## 30        KLK7 ENSG00000169035
## 31        MMP7 ENSG00000137673
## 32        MUC4 ENSG00000145113
## 33         PI3 ENSG00000124102
## 34        PIGR ENSG00000162896
## 35        PLAU ENSG00000122861
## 36       PLAUR ENSG00000011422
## 37        SAA1 ENSG00000173432
## 38        SAA2 ENSG00000134339
## 39      SDCBP2 ENSG00000125775
## 40    SERPINB2 ENSG00000197632
## 41      SLC9A4 ENSG00000180251
## 42        SLPI ENSG00000124107
## 43        TCN1 ENSG00000134827
## 44      TSPAN8 ENSG00000127324
## 45         UBD ENSG00000213886
## 46         VIM ENSG00000026025
## 47     WFDC21P ENSG00000261040

ensembl_len_list <- list(Dormancy_Gene_Set = important_ensembl_ids_len$ensembl_gene_id)

# Run escape to execute single-cell enrichment analysis
ES.epi_filter_len <- escape.matrix(epi_filter_len, 
                                   method = "AUCell",
                                   gene.sets = ensembl_list_len, 
                                   groups = 3000, 
                                   min.size = 5
                                   )

epi_filter_len <- AddMetaData(epi_filter_len, metadata = ES.epi_filter_len)

# Prepare some objects for monocle3 analysis
counts_len <- GetAssayData(epi_filter_len, assay = "RNA", layer = "counts")
gene_metadata_len <- data.frame(gene_short_name = rownames(counts_len))
rownames(gene_metadata_len) <- rownames(counts_len)
meta_data_len <- epi_filter_len@meta.data
cds_len <- new_cell_data_set(
  counts_len,
  cell_metadata = meta_data_len,
  gene_metadata = gene_metadata_len
)

# monocle3 analysis
cds_len <- preprocess_cds(cds_len, num_dim = 7, method = "PCA")
cds_len <- align_cds(cds_len, preprocess_method = "PCA", alignment_group = "donor_id", alignment_k = 15)
cds_len <- reduce_dimension(cds_len, preprocess_method = "Aligned", reduction_method = "UMAP")
cds_len <- cluster_cells(cds_len, preprocess_method = "Aligned", k = 20, reduction_method = "UMAP")
cds_len <- learn_graph(cds_len, use_partition = FALSE)
plot_cells(cds_len, color_cells_by = "cluster")

# Fix a root node programatically by the AUCell enrichment score and calculate the pseudotime
get_meta_based_principal_node <- function(cds, meta_column) {
  # Gain the meta data
  meta_values <- colData(cds)[[meta_column]]
  # Gain the cell ids of "Dormant cells"
  cell_ids <- which(meta_values == max(meta_values, na.rm = TRUE))
  # Gain the nearest node of the cells
  closest_vertex <- cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  # Identify the root node which the dormancy cells belong to
  root_pr_nodes <-
    V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names(
      which.max(table(closest_vertex[cell_ids, ]))
    ))]
  root_pr_nodes
}
root_pr_nodes_len <- get_meta_based_principal_node(cds_len, "Dormancy_gene_set")
cds_len <- order_cells(cds_len, root_pr_nodes = root_pr_nodes_len)
plot_cells(cds_len,
           color_cells_by = "pseudotime",
           label_cell_groups= FALSE,
           label_leaves= FALSE,
           label_branch_points= FALSE,
           graph_label_size= 1.5)

# Explore the important genes changing their expression along pseudotime
pseudo_results_len <- graph_test(cds_len, neighbor_graph="principal_graph", cores=128)
q_val_0_list_len <- subset(pseudo_results_len, q_value == 0)
important_gene_ids_len <- row.names(q_val_0_list_len)
