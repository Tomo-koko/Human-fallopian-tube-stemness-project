# Library
library(hdf5r)
library(Seurat)
library(cowplot)
library(reshape2)
library(RColorBrewer)
library(gplots)
library(viridis)
library(tidyverse)
library(lme4)
library(limma)
library(S4Vectors)
library(BiocGenerics)
library(DelayedArray)
library(DelayedMatrixStats)
library(SingleCellExperiment)
library(SummarizedExperiment)
library(batchelor)
library(HDF5Array)
library(terra)
library(ggrastr)
library(monocle3)
library(escape)

# Fix seed and figure font
set.seed(42)
theme_set(theme_gray(base_family = "Arial"))

# Load scRNA-seq data by Ulrich et al
url_ul <- "https://datasets.cellxgene.cziscience.com/116cae82-6420-48a8-af2f-bc9f64545788.rds"
output_file_ul <- "116cae82-6420-48a8-af2f-bc9f64545788.rds"
download.file(url_ul, destfile = output_file_ul)
sc_ul <- readRDS(output_file_ul)

# Extract epithelial cells by the expression of EpCAM (ENSG00000119888) and CDH1 (ENSG00000039068)
sc_ul@meta.data$cell_type <- NULL
genes_of_epithelial_cell <- c("ENSG00000119888", "ENSG00000039068") 
expression_data_ul <- FetchData(sc_ul, vars = genes_of_epithelial_cell, slot = "data")
plot_epi_ul <- data.frame(
  Gene1 = expression_data_ul[, "ENSG00000119888"],
  Gene2 = expression_data_ul[, "ENSG00000039068"]
)
epithelial_cells_ul <- sum(plot_epi_ul$Gene1 >= 0.1 & plot_epi_ul$Gene2 >= 0.1)
ggplot(plot_epi_ul, aes(x = Gene1, y = Gene2)) +
  geom_point(size = 1, alpha = 0.7) +
  geom_vline(xintercept = 0.1, linetype = "dashed", color = "red") +  
  geom_hline(yintercept = 0.1, linetype = "dashed", color = "blue") + 
  labs(
    title = "Epithelial characteristics of all cells in the dataset by Ulrich et al",
    x = "Expression of EpCAM",
    y = "Expression of CDH1"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  ) +
  annotate(
    "text", x = max(plot_epi_ul$Gene1), y = max(plot_epi_ul$Gene2), 
    label = paste("EpCAM/CDH1(+/+) epithelial cells:", epithelial_cells_ul),
    hjust = 1, vjust = 1, color = "black", size = 5
  )

  ## Threshold to define epithelial cells: the expression of EpCAM >= 0.1 and CDH >= 0.1
  data_ul <- sc_ul@assays$RNA@data
  cells_to_keep_ul <- colnames(data_ul)[
  data_ul["ENSG00000119888", ] >= 0.1 & data_ul["ENSG00000039068", ] >= 0.1
　]
  epi_filter_ul <- subset(sc_ul, cells = cells_to_keep_ul)

# Prepare some objects for monocle3 analysis
counts_ul <- GetAssayData(epi_filter_ul, assay = "RNA", layer = "counts")
gene_metadata_ul <- data.frame(gene_short_name = rownames(counts_ul))
rownames(gene_metadata_ul) <- rownames(counts_ul)
meta_data_ul <- epi_filter_ul@meta.data
cds_ul <- new_cell_data_set(
  counts_ul,
  cell_metadata = meta_data_ul,
  gene_metadata = gene_metadata_ul
)

# monocle3 analysis
cds_ul <- preprocess_cds(cds_ul, num_dim = 10, method = "PCA")
cds_ul <- align_cds(cds_ul, preprocess_method = "PCA", alignment_group = "donor_id", alignment_k = 500)
cds_ul <- reduce_dimension(cds_ul, preprocess_method = "Aligned", reduction_method = "UMAP")
cds_ul <- cluster_cells(cds_ul, preprocess_method = "Aligned", k = 20, reduction_method = "UMAP")
cds_ul <- learn_graph(cds_ul, use_partition = FALSE)
plot_cells(cds_ul, color_cells_by = "cluster")

# Attach the UMAP result to the Seurat Object
umap_coords_ul <- reducedDims(cds_ul)$UMAP
umap_coords_df_ul <- as.data.frame(umap_coords_ul)
colnames(umap_coords_df_ul) <- c("UMAP_1", "UMAP_2")
umap_coords_df_ul$cell_id <- rownames(umap_coords_ul)
umap_coords_df_ul <- umap_coords_df_ul[match(rownames(epi_filter_ul@meta.data), umap_coords_df_ul$cell_id), ]
epi_filter_ul[["monocle3_UMAP"]] <- CreateDimReducObject(
  embeddings = as.matrix(umap_coords_df_ul[, c("UMAP_1", "UMAP_2")]),
  key = "monUMAP_",
  assay = DefaultAssay(epi_filter_ul)
)

# Attach the cluster information to the Seurat Object
monocle_clusters_ul <- clusters(cds_ul)
monocle_clusters_ul <- monocle_clusters_ul[rownames(epi_filter_ul@meta.data)]
epi_filter_ul@meta.data$monocle3_clusters <- monocle_clusters_ul

# Plot UMAP
DimPlot(epi_filter_ul, reduction = "monocle3_UMAP", group.by = "monocle3_clusters", label = TRUE)
DimPlot(epi_filter_ul, reduction = "monocle3_UMAP", group.by = "donor_id", label = TRUE)

# Run escape to execute single-cell enrichment analysis
ES.epi_filter_ul <- escape.matrix(epi_filter_ul, 
                                   method = "ssGSEA",
                                   gene.sets = genesets, 
                                   groups = 3000, 
                                   min.size = 5
                                   )

epi_filter_ul <- AddMetaData(epi_filter_ul, metadata = ES.epi_filter_ul)
FeaturePlot(epi_filter_ul, reduction = "monocle3_UMAP", features = colnames(ES.epi_filter_ul), cols = c("green", "red"))
VlnPlot(epi_filter_ul, group.by = "monocle3_clusters", features = colnames(ES.epi_filter_ul))

# Add the enrichment score of the dormancy gene set to the cds object
seurat_meta_ul <- epi_filter_ul@meta.data
common_cells_ul <- intersect(rownames(seurat_meta_ul), colnames(cds_ul))
seurat_meta_ul_filtered <- seurat_meta_ul[common_cells_ul, ]
seurat_meta_ul_filtered <- as(seurat_meta_ul_filtered, "DataFrame")
colData(cds_ul) <- seurat_meta_ul_filtered

# Fix a root node programatically by the enrichment score of the dormancy gene set and calculate the pseudotime
get_meta_based_principal_node <- function(cds, meta_column) {
  # Gain the meta data
  meta_values <- colData(cds)[[meta_column]]
  # Gain the cell ids of "Dormant cells"
  cell_ids <- which(meta_values == max(meta_values, na.rm = TRUE))
  # Gain the nearest node of the cells
  closest_vertex <- cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  # Identify the root node which the dormancy cells belong to
  root_pr_nodes <-
    igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names(
      which.max(table(closest_vertex[cell_ids, ]))
    ))]
  root_pr_nodes
}
root_pr_nodes_ul <- get_meta_based_principal_node(cds_ul, "Dormancy_gene_set")
cds_ul <- order_cells(cds_ul, root_pr_nodes = root_pr_nodes_ul)
plot_cells(cds_ul,
           color_cells_by = "pseudotime",
           label_cell_groups= FALSE,
           label_leaves= FALSE,
           label_branch_points= FALSE,
           graph_label_size= 1.5)

# Explore the marker genes of the dormant cells
trial_ul <- graph_test(cds_ul, neighbor_graph="principal_graph", cores=4)
trial_ids_ul <- row.names(subset(trial_ul, q_value < 0.05))




---------------
# Library
library(hdf5r)
library(Seurat)
library(cowplot)
library(reshape2)
library(RColorBrewer)
library(gplots)
library(viridis)
library(tidyverse)
library(lme4)
library(limma)
library(S4Vectors)
library(BiocGenerics)
library(DelayedArray)
library(DelayedMatrixStats)
library(SingleCellExperiment)
library(SummarizedExperiment)
library(batchelor)
library(HDF5Array)
library(terra)
library(ggrastr)
library(monocle3)
library(escape)

# Fix seed and figure font
set.seed(42)
theme_set(theme_gray(base_family = "Arial"))

# Load scRNA-seq data by Ulrich et al
url_ul <- "https://datasets.cellxgene.cziscience.com/116cae82-6420-48a8-af2f-bc9f64545788.rds"
output_file_ul <- "116cae82-6420-48a8-af2f-bc9f64545788.rds"
download.file(url_ul, destfile = output_file_ul)
sc_ul <- readRDS(output_file_ul)

# Extract epithelial cells by the expression of EpCAM (ENSG00000119888) and CDH1 (ENSG00000039068)
sc_ul@meta.data$cell_type <- NULL
genes_of_epithelial_cell <- c("ENSG00000119888", "ENSG00000039068") 
expression_data_ul <- FetchData(sc_ul, vars = genes_of_epithelial_cell, slot = "data")
plot_epi_ul <- data.frame(
  Gene1 = expression_data_ul[, "ENSG00000119888"],
  Gene2 = expression_data_ul[, "ENSG00000039068"]
)
epithelial_cells_ul <- sum(plot_epi_ul$Gene1 >= 0.1 & plot_epi_ul$Gene2 >= 0.1)
ggplot(plot_epi_ul, aes(x = Gene1, y = Gene2)) +
  geom_point(size = 1, alpha = 0.7) +
  geom_vline(xintercept = 0.1, linetype = "dashed", color = "red") +  
  geom_hline(yintercept = 0.1, linetype = "dashed", color = "blue") + 
  labs(
    title = "Epithelial characteristics of all cells in the dataset by Ulrich et al",
    x = "Expression of EpCAM",
    y = "Expression of CDH1"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  ) +
  annotate(
    "text", x = max(plot_epi_ul$Gene1), y = max(plot_epi_ul$Gene2), 
    label = paste("EpCAM/CDH1(+/+) epithelial cells:", epithelial_cells_ul),
    hjust = 1, vjust = 1, color = "black", size = 5
  )

  ## Threshold to define epithelial cells: the expression of EpCAM >= 0.1 and CDH >= 0.1
  data_ul <- sc_ul@assays$RNA@data
  cells_to_keep_ul <- colnames(data_ul)[
  data_ul["ENSG00000119888", ] >= 0.1 & data_ul["ENSG00000039068", ] >= 0.1
　]
  epi_filter_ul <- subset(sc_ul, cells = cells_to_keep_ul)

# Run escape to execute single-cell enrichment analysis
ES.epi_filter_ul <- escape.matrix(epi_filter_ul, 
                                   method = "AUCell",
                                   gene.sets = genesets, 
                                   groups = 3000, 
                                   min.size = 5
                                   )

epi_filter_ul <- AddMetaData(epi_filter_ul, metadata = ES.epi_filter_ul)

# Prepare some objects for monocle3 analysis
counts_ul <- GetAssayData(epi_filter_ul, assay = "RNA", layer = "counts")
gene_metadata_ul <- data.frame(gene_short_name = rownames(counts_ul))
rownames(gene_metadata_ul) <- rownames(counts_ul)
meta_data_ul <- epi_filter_ul@meta.data
cds_ul <- new_cell_data_set(
  counts_ul,
  cell_metadata = meta_data_ul,
  gene_metadata = gene_metadata_ul
)

# monocle3 analysis
cds_ul <- preprocess_cds(cds_ul, num_dim = 10, method = "PCA")
cds_ul <- align_cds(cds_ul, preprocess_method = "PCA", alignment_group = "donor_id", alignment_k = 500)
cds_ul <- reduce_dimension(cds_ul, preprocess_method = "Aligned", reduction_method = "UMAP")
cds_ul <- cluster_cells(cds_ul, preprocess_method = "Aligned", k = 20, reduction_method = "UMAP")
cds_ul <- learn_graph(cds_ul, use_partition = FALSE)
plot_cells(cds_ul, color_cells_by = "cluster")

# Fix a root node programatically by the AUCell enrichment score and calculate the pseudotime
get_meta_based_principal_node <- function(cds, meta_column) {
  # Gain the meta data
  meta_values <- colData(cds)[[meta_column]]
  # Gain the cell ids of "Dormant cells"
  cell_ids <- which(meta_values == max(meta_values, na.rm = TRUE))
  # Gain the nearest node of the cells
  closest_vertex <- cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  # Identify the root node which the dormancy cells belong to
  root_pr_nodes <-
    igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names(
      which.max(table(closest_vertex[cell_ids, ]))
    ))]
  root_pr_nodes
}
root_pr_nodes_ul <- get_meta_based_principal_node(cds_ul, "Dormancy_gene_set")
cds_ul <- order_cells(cds_ul, root_pr_nodes = root_pr_nodes_ul)
plot_cells(cds_ul,
           color_cells_by = "pseudotime",
           label_cell_groups= FALSE,
           label_leaves= FALSE,
           label_branch_points= FALSE,
           graph_label_size= 1.5)

# Explore the marker genes of the dormant cells
pseudo_results_ul <- graph_test(cds_ul, neighbor_graph="principal_graph", cores=128)
q_val_0_list_ul <- pseudo_results_ul[pseudo_results_ul$q_value == 0, ]
