# Library
library(hdf5r)
library(Seurat)
library(cowplot)
library(reshape2)
library(RColorBrewer)
library(gplots)
library(viridis)
library(tidyverse)
library(lme4)
library(limma)
library(S4Vectors)
library(BiocGenerics)
library(DelayedArray)
library(DelayedMatrixStats)
library(SingleCellExperiment)
library(SummarizedExperiment)
library(batchelor)
library(HDF5Array)
library(terra)
library(ggrastr)
library(monocle3)
library(escape)

# Fix seed and figure font
set.seed(42)
theme_set(theme_gray(base_family = "Arial"))

# Load scRNA-seq data by Lengyel et al
url_len <- "https://datasets.cellxgene.cziscience.com/9e7dd889-c863-46f9-9ab9-99175e23fd75.rds"
output_file_len <- "9e7dd889-c863-46f9-9ab9-99175e23fd75.rds"
download.file(url_len, destfile = output_file_len)
sc_len <- readRDS(output_file_len)

# Extract epithelial cells by the expression of EpCAM (ENSG00000119888) and CDH1 (ENSG00000039068)
sc_len@meta.data$cell_type <- NULL
genes_of_epithelial_cell <- c("ENSG00000119888", "ENSG00000039068")  ## using the same geneset to sc_ul in the page 3.1
expression_data_len <- FetchData(sc_len, vars = genes_of_epithelial_cell, slot = "data")
plot_epi_len <- data.frame(
  Gene1 = expression_data_len[, "ENSG00000119888"],
  Gene2 = expression_data_len[, "ENSG00000039068"]
)
epithelial_cells_len <- sum(plot_epi_len$Gene1 >= 0.1 & plot_epi_len$Gene2 >= 0.1)
ggplot(plot_epi_len, aes(x = Gene1, y = Gene2)) +
  geom_point(size = 1, alpha = 0.7) +
  geom_vline(xintercept = 0.1, linetype = "dashed", color = "red") +  
  geom_hline(yintercept = 0.1, linetype = "dashed", color = "blue") + 
  labs(
    title = "Epithelial characteristics of all cells in the dataset by Lengyel et al",
    x = "Expression of EpCAM",
    y = "Expression of CDH1"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  ) +
  annotate(
    "text", x = max(plot_epi_len$Gene1), y = max(plot_epi_len$Gene2), 
    label = paste("EpCAM/CDH1(+/+) epithelial cells:", epithelial_cells_len),
    hjust = 1, vjust = 1, color = "black", size = 5
  )

  ## Threshold to define epithelial cells: the expression of EpCAM >= 0.1 and CDH >= 0.1
  data_len <- sc_len@assays$RNA@data
  cells_to_keep_len <- colnames(data_len)[
  data_len["ENSG00000119888", ] >= 0.1 & data_len["ENSG00000039068", ] >= 0.1
ã€€]
  epi_filter_len <- subset(sc_len, cells = cells_to_keep_len)

# Prepare some objects for monocle3 analysis
counts_len <- GetAssayData(epi_filter_len, assay = "RNA", layer = "counts")
gene_metadata_len <- data.frame(gene_short_name = rownames(counts_len))
rownames(gene_metadata_len) <- rownames(counts_len)
meta_data_len <- epi_filter_len@meta.data
cds_len <- new_cell_data_set(
  counts_len,
  cell_metadata = meta_data_len,
  gene_metadata = gene_metadata_len
)

# monocle3 analysis (remove the batch effect due to donor_id)
cds_len <- preprocess_cds(cds_len, num_dim = 10, method = "PCA")
cds_len <- align_cds(cds_len, preprocess_method = "PCA", alignment_group = "donor_id", alignment_k = 200)
cds_len <- reduce_dimension(cds_len, preprocess_method = "Aligned", reduction_method = "UMAP")
cds_len <- cluster_cells(cds_len, preprocess_method = "Aligned", k = 20, reduction_method = "UMAP")
cds_len <- learn_graph(cds_len)
plot_cells(cds_len, color_cells_by = "cluster")

# Attach the UMAP result to the Seurat Object
umap_coords_len <- reducedDims(cds_len)$UMAP
umap_coords_df_len <- as.data.frame(umap_coords_len)
colnames(umap_coords_df_len) <- c("UMAP_1", "UMAP_2")
umap_coords_df_len$cell_id <- rownames(umap_coords_len)
umap_coords_df_len <- umap_coords_df_len[match(rownames(epi_filter_len@meta.data), umap_coords_df_len$cell_id), ]
epi_filter_len[["monocle3_UMAP"]] <- CreateDimReducObject(
  embeddings = as.matrix(umap_coords_df_len[, c("UMAP_1", "UMAP_2")]),
  key = "monUMAP_",
  assay = DefaultAssay(epi_filter_len)
)

# Attach the cluster information to the Seurat Object
monocle_clusters_len <- clusters(cds_len)
monocle_clusters_len <- monocle_clusters_len[rownames(epi_filter_len@meta.data)]
epi_filter_len@meta.data$monocle3_clusters <- monocle_clusters_len

# Plot UMAP
DimPlot(epi_filter_len, reduction = "monocle3_UMAP", group.by = "monocle3_clusters", label = TRUE)
DimPlot(epi_filter_len, reduction = "monocle3_UMAP", group.by = "donor_id", label = TRUE)

# Run escape to execute single-cell enrichment analysis
ES.epi_filter_len <- escape.matrix(epi_filter_len, 
                                   method = "AUCell",
                                   gene.sets = genesets, 
                                   groups = 3000, 
                                   min.size = 5
                                   )

epi_filter_len <- AddMetaData(epi_filter_len, metadata = ES.epi_filter_len)
FeaturePlot(epi_filter_len, reduction = "monocle3_UMAP", features = colnames(ES.epi_filter_len), cols = c("green", "red"))
VlnPlot(epi_filter_len, group.by = "monocle3_clusters", features = colnames(ES.epi_filter_len))

# Add the enrichment score of the dormancy gene set to the cds object
seurat_meta_len <- epi_filter_len@meta.data
common_cells_len <- intersect(rownames(seurat_meta_len), colnames(cds_len))
seurat_meta_len_filtered <- seurat_meta_len[common_cells_len, ]
seurat_meta_len_filtered <- as(seurat_meta_len_filtered, "DataFrame")
colData(cds_len) <- seurat_meta_len_filtered

# Fix a root node programatically by the enrichment score of the dormancy gene set and calculate the pseudotime
get_meta_based_principal_node <- function(cds, meta_column) {
  # Gain the meta data
  meta_values <- colData(cds)[[meta_column]]
  # Gain the cell ids of "Dormant cells"
  cell_ids <- which(meta_values == max(meta_values, na.rm = TRUE))
  # Gain the nearest node of the cells
  closest_vertex <- cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  # Identify the root node which the dormancy cells belong to
  root_pr_nodes <-
    igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names(
      which.max(table(closest_vertex[cell_ids, ]))
    ))]
  root_pr_nodes
}
root_pr_nodes <- get_meta_based_principal_node(cds_len, "Dormancy_gene_set")
cds_len <- order_cells(cds_len, root_pr_nodes = root_pr_nodes)
plot_cells(cds_len,
           color_cells_by = "pseudotime",
           label_cell_groups= FALSE,
           label_leaves= FALSE,
           label_branch_points= FALSE,
           graph_label_size= 1.5)

# Explore the marker genes of the dormant cells
