# Library
library(hdf5r)
library(Seurat)
library(cowplot)
library(reshape2)
library(RColorBrewer)
library(gplots)
library(viridis)
library(tidyverse)
library(lme4)
library(limma)
library(S4Vectors)
library(BiocGenerics)
library(DelayedArray)
library(DelayedMatrixStats)
library(SingleCellExperiment)
library(SummarizedExperiment)
library(batchelor)
library(HDF5Array)
library(terra)
library(ggrastr)
library(monocle3)
library(biomaRt)
library(splines2)

# Fix seed and figure font
set.seed(42)
theme_set(theme_gray(base_family = "Arial"))

# Define key genes in both scRNA-seq data
Key_Genes <- intersect(important_gene_ids_len, important_gene_ids_ul)

# Create the subset of the scRNA-seq datasets
cds_key_len <- cds_len[rowData(cds_len)$gene_short_name %in% Key_Genes]
cds_key_ul <- cds_ul[rowData(cds_ul)$gene_short_name %in% Key_Genes]

# !!Atention!! Normalize the gene expression from count data in the same way as the monocle3 plot_genes_in_pseudotime source code
# Please refer to the link below
# https://github.com/cole-trapnell-lab/monocle3/blob/v1.3.1/R/plotting.R

cds_exprs_len <- SingleCellExperiment::counts(cds_key_len)
cds_exprs_len <- Matrix::t(Matrix::t(cds_exprs_len)/size_factors(cds_key_len))

cds_exprs_ul <- SingleCellExperiment::counts(cds_key_ul)
cds_exprs_ul <- Matrix::t(Matrix::t(cds_exprs_ul)/size_factors(cds_key_ul))

# Create data frames for an analysis using splines2
dense_matrix_len <- as.matrix(cds_exprs_len)
df_len <- as.data.frame(dense_matrix_len)
rownames(df_len) <- rownames(cds_exprs_len)
colnames(df_len) <- colnames(cds_exprs_len)
pseudotime_len <- pseudotime(cds_key_len)
genes_len <- rownames(df_len)

dense_matrix_ul <- as.matrix(cds_exprs_ul)
df_ul <- as.data.frame(dense_matrix_ul)
rownames(df_ul) <- rownames(cds_exprs_ul)
colnames(df_ul) <- colnames(cds_exprs_ul)
pseudotime_ul <- pseudotime(cds_key_ul)
genes_ul <- rownames(df_ul)

# Calculate the derivatives of natural spline curves of all genes
derivative_results_len <- list()
for (gene in genes_len) {
  expr <- as.numeric(df_len[gene, ])  
  ns_basis <- naturalSpline(pseudotime_len, df = 3) 
  model <- glm(expr ~ ns_basis)  
  coef <- c(model$coefficients["ns_basis1"], model$coefficients["ns_basis2"], model$coefficients["ns_basis3"])
  ns_basis_deriv <- deriv(ns_basis) 
  deriv_values <- as.vector(ns_basis_deriv %*% coef)  
  derivative_results_len[[gene]] <- deriv_values  
}
derivative_df_len <- do.call(cbind, derivative_results_len)
colnames(derivative_df_len) <- genes_len
derivative_df_len <- data.frame(pseudotime = pseudotime_len, derivative_df_len)
str(derivative_df_len)

derivative_results_ul <- list()
for (gene in genes_ul) {
  expr <- as.numeric(df_ul[gene, ])  
  ns_basis <- naturalSpline(pseudotime_ul, df = 3) 
  model <- glm(expr ~ ns_basis)  
  coef <- c(model$coefficients["ns_basis1"], model$coefficients["ns_basis2"], model$coefficients["ns_basis3"])
  ns_basis_deriv <- deriv(ns_basis) 
  deriv_values <- as.vector(ns_basis_deriv %*% coef)  
  derivative_results_ul[[gene]] <- deriv_values
}
derivative_df_ul <- do.call(cbind, derivative_results_ul)
colnames(derivative_df_ul) <- genes_ul
derivative_df_ul <- data.frame(pseudotime = pseudotime_ul, derivative_df_ul)
str(derivative_df_ul) 

# Chase the process of differentiation and proliferation by well-known marker genes
## OVGP1: ENSG00000085465
## FOXJ1: ENSG00000129654
## CAPS: ENSG00000105519
## RSPH1: ENSG00000160188
markers <- c("ENSG00000085465", "ENSG00000129654", "ENSG00000105519", "ENSG00000160188")

marker_result_len <- list()
marker_result_ul <- list()
for (gene in markers) {
  expr_len <- as.numeric(df_len[gene, ])  
  ns_basis_len <- naturalSpline(pseudotime_len, df = 3, intercept = TRUE) 
  model_len <- glm(expr_len ~ ns_basis_len)  
  coef <- c(model_len$coefficients["ns_basis_len1"], model_len$coefficients["ns_basis_len2"], model_len$coefficients["ns_basis_len3"])
  ns_basis_deriv_len <- deriv(ns_basis_len)  
  deriv_values_len <- as.vector(ns_basis_deriv_len %*% coef)  
  marker_result_len[[gene]] <- deriv_values_len
  
  expr_ul <- as.numeric(df_ul[gene, ])  
  ns_basis_ul <- naturalSpline(pseudotime_ul, df = 3, intercept = TRUE) 
  model_ul <- glm(expr_ul ~ ns_basis_ul)  
  coef <- c(model_ul$coefficients["ns_basis_ul1"], model_ul$coefficients["ns_basis_ul2"], model_ul$coefficients["ns_basis_ul3"])
  ns_basis_deriv_ul <- deriv(ns_basis_ul)  
  deriv_values_ul <- as.vector(ns_basis_deriv_ul %*% coef)  
  marker_result_ul[[gene]] <- deriv_values_ul
}

marker_deriv_len <- data.frame(pseudotime = pseudotime_len, do.call(cbind, marker_result_len))
colnames(marker_deriv_len) <- c("pseudotime", markers)

marker_deriv_ul <- data.frame(pseudotime = pseudotime_ul, do.call(cbind, marker_result_ul))
colnames(marker_deriv_ul) <- c("pseudotime", markers)

ggplot(marker_deriv_len, aes(x = pseudotime)) +
  geom_line(aes(y = `ENSG00000085465`), color = "red") +
  geom_line(aes(y = `ENSG00000129654`), color = "green") +
  geom_line(aes(y = `ENSG00000105519`), color = "blue") +
  geom_line(aes(y = `ENSG00000160188`), color = "purple") +
  labs(title = "Derivatives of Genes (len)",
       x = "Pseudotime",
       y = "Derivative") +
  theme_minimal()

ggplot(marker_deriv_ul, aes(x = pseudotime)) +
  geom_line(aes(y = `ENSG00000085465`), color = "red") +
  geom_line(aes(y = `ENSG00000129654`), color = "green") +
  geom_line(aes(y = `ENSG00000105519`), color = "blue") +
  geom_line(aes(y = `ENSG00000160188`), color = "purple") +
  labs(title = "Derivatives of Genes (ul)",
       x = "Pseudotime",
       y = "Derivative") +
  theme_minimal()

# Extract key genes with monotonically decreasing graphs
derivative_matrix_len <- derivative_df_len[, -1] ## remove the col of pseudotime
derivative_matrix_ul <- derivative_df_ul[, -1] ## remove the col of pseudotime

get_negative_derivative_genes <- function(derivative_matrix) {
  colnames(derivative_matrix)[apply(derivative_matrix, 2, function(x) all(x < 0))]
}
dormancy_genes_len <- get_negative_derivative_genes(derivative_matrix_len)
dormancy_genes_ul <- get_negative_derivative_genes(derivative_matrix_ul)

Key_Genes_in_Dormancy <- intersect(dormancy_genes_len, dormancy_genes_ul)

Key_Genes_in_Dormancy_List <- getBM(
  attributes = c("ensembl_gene_id", "hgnc_symbol"),  
  filters = "ensembl_gene_id",                       
  values = Key_Genes_in_Dormancy,                    
  mart = ensembl                                     
)

Key_Genes_in_Dormancy_List

